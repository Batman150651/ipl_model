# -*- coding: utf-8 -*-
"""Copy of iplwinpredictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XIEfp1TpVUHmhoTlL8hbZiXmqH36bBWw

## **Problem Statement**

## **Win predictor that displays the probability of the chasing team winning an IPL match after every over.**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

matches_df = pd.read_csv('matches.csv')
# matches_df
# matches_df['team1'].unique()
# matches_df['team2'].unique()

"""checking empty columns"""

# matches_df.isnull().sum()

"""display all teams,venues and no. of seasons and matches"""

# print('Total Seasons:',len(matches_df.Season.unique()))
# print('Total Matches Played:',matches_df.id.count())
# print('Teams:',matches_df.team1.unique())
# print('Venues:',matches_df.venue.unique())

"""adding other datasets

"""

deliveries_df = pd.read_csv('deliveries.csv')
# deliveries_df.shape

"""stadiums present in cities"""

city_venue = matches_df.groupby(['city','venue']).count()['Season']
city_venue_df = pd.DataFrame(city_venue)
# city_venue_df

"""calculating total score"""

inning_score = deliveries_df.groupby(['match_id','inning']).sum()['total_runs']
# inning_score

"""only 1st inning scores"""

inning_score = deliveries_df.groupby(['match_id', 'inning']).sum()['total_runs'].reset_index()

inning_score = inning_score[inning_score['inning'] == 1]
# inning_score

"""merge the total first innings runs into matches_df using match ID."""

matches_df = matches_df.merge(inning_score[['match_id','total_runs']], left_on='id', right_on='match_id')
# matches_df

"""removing duplicate teams"""

matches_df['team1'] = matches_df['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
matches_df['team2'] = matches_df['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')

matches_df['team1'] = matches_df['team1'].str.replace('Delhi Daredevils','Delhi Capitals')
matches_df['team2'] = matches_df['team2'].str.replace('Delhi Daredevils','Delhi Capitals')


teams = [   #Existing teams
    'Chennai Super Kings',
    'Delhi Capitals',
    'Mumbai Indians',
    'Kolkata Knight Riders',
    'Kings XI Punjab',
    'Rajasthan Royals',
    'Royal Challengers Bangalore',
    'Sunrisers Hyderabad'
]

matches_df = matches_df[matches_df['team1'].isin(teams)]
matches_df = matches_df[matches_df['team2'].isin(teams)]

"""Removing Tied matches"""

matches_df = matches_df[matches_df['dl_applied'] == 0]

# matches_df.columns

matches_df = matches_df[['match_id','city','winner','total_runs']]

# matches_df["match_id"].nunique()

"""Using this 1st innings data and scores, we'll prepare the 2nd innings data that will be fed to the model.

"""

deliveries_df = matches_df.merge(deliveries_df, on="match_id")

"""Filtering  for just the second inning data

"""

deliveries_df = deliveries_df[deliveries_df['inning'] == 2]

"""calculate score till the current ball

"""

deliveries_df['current_score'] = deliveries_df.groupby('match_id')['total_runs_y'].cumsum()
# deliveries_df.head()

deliveries_df['runs_left'] = deliveries_df['total_runs_x'] - deliveries_df['current_score']

deliveries_df['balls_left'] = 120 - ((deliveries_df['over']-1)*6 + deliveries_df['ball'])

"""Player dismissals"""

deliveries_df['player_dismissed'] = deliveries_df['player_dismissed'].fillna("0")
deliveries_df['player_dismissed'] = deliveries_df['player_dismissed'].apply(lambda x:x if x == "0" else "1")
deliveries_df['player_dismissed'] = deliveries_df['player_dismissed'].astype('int')
# deliveries_df.head()

# deliveries_df['player_dismissed'].values.dtype

"""Wickets left

"""

wkts = deliveries_df.groupby(['match_id'])['player_dismissed'].cumsum()
deliveries_df['wickets'] = 10 - wkts
#deliveries_df.head(50)

"""Calculating required run rate and current run rate"""

deliveries_df['crr'] = (deliveries_df['current_score']*6) / (120 - deliveries_df['balls_left'])
deliveries_df['rrr'] = (deliveries_df['runs_left']*6) / deliveries_df['balls_left']

"""Checking if chasing team won or not"""

def match_result(row):
    return 1 if row['batting_team'] == row['winner'] else 0

deliveries_df['result'] = deliveries_df.apply(match_result ,axis=1)

"""finalaizing dataframe"""

final_df = deliveries_df[['batting_team','bowling_team','city','runs_left',\
                    'balls_left','wickets','total_runs_x','crr','rrr','result']]

final_df.dropna(inplace=True)
final_df = final_df[final_df['balls_left'] != 0]
#final_df

"""splitting"""

X = final_df.iloc[:,:-1]
y = final_df.iloc[:,-1]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# X_train.shape,X_test.shape, y_train.shape, y_test.shape

# X_train

# X_test

"""we should encode the non numerical columns"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
col_trf = ColumnTransformer([('col_trf',OneHotEncoder(drop='first'), ['batting_team','bowling_team','city'])],remainder='passthrough')
X_train_transformed = col_trf.fit_transform(X_train)
X_test_transformed = col_trf.transform(X_test)

"""**USING RANDOM FOREST**"""

from sklearn.ensemble import RandomForestClassifier


clf = RandomForestClassifier(n_estimators=10, max_depth=15, random_state=42)
clf.fit(X_train_transformed, y_train)


y_pred = clf.predict(X_test_transformed)

single_input_transformed = col_trf.transform(X_train[:1])
clf.predict_proba(single_input_transformed)

"""Testing Accuracy"""

from sklearn.metrics import accuracy_score, classification_report
print(accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))
print("The Random Forest Classification model delivers an {} % accuracy in the predictions.".format(round((accuracy_score(y_test, y_pred)*100),2)))

import joblib
joblib.dump(clf, 'ipl_model.pkl') 
joblib.dump(col_trf,'columntransformer.pkl')